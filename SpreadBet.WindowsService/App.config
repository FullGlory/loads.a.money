<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=4.4.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog"/>
  </configSections>

  <appSettings>
    <add key="defaultApplicationName" value="GatherPriceData"/>
    <!--<add key="defaultApplicationName" value="CloseBetDecisions"/>-->
    <!--<add key="defaultApplicationName" value="GetBetDecisions"/>-->
  </appSettings>

  <connectionStrings>
    <!--<add name="SpreadBet" connectionString="Server=JPCGOODBY\JPCGOODBY;Database=SpreadBet;Trusted_Connection=True;" providerName="System.Data.SqlClient" />-->
    <add name="SpreadBet" connectionString="Server=PAUL-LAPTOP\SQLEXPRESS;Database=SpreadBet;Trusted_Connection=True;MultipleActiveResultSets=True" providerName="System.Data.SqlClient" />
  </connectionStrings>

  <unity>

    <!-- LoggingBehaviour -->
    <namespace name="SpreadBet.Infrastructure.Unity.Interception"/>
    <assembly name="SpreadBet.Infrastructure.Unity"/>

    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension,Microsoft.Practices.Unity.Interception.Configuration" />

    <containers>
      <container name="GatherPriceData">
        <extension type="Interception"/>

        <register type="SpreadBet.Infrastructure.Messaging.ISender`1[[SpreadBet.Domain.StockPrice,SpreadBet.Domain]],SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.StraightThroughChannel`1[[SpreadBet.Domain.StockPrice,SpreadBet.Domain]],SpreadBet.Infrastructure">
          <lifetime type="singleton" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="LoggingBehaviour"/>
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.IReceiver`1[[SpreadBet.Domain.StockPrice,SpreadBet.Domain]],SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.StraightThroughChannel`1[[SpreadBet.Domain.StockPrice,SpreadBet.Domain]],SpreadBet.Infrastructure">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Scheduler.IScheduler,SpreadBet.Scheduler"
                  mapTo="SpreadBet.Scheduler.Scheduler,SpreadBet.Scheduler">
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="LoggingBehaviour"/>
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Common.Interfaces.IScraper, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.HTTPScraper, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Logging.ILogger, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Logging.NLog.NLogLogger, SpreadBet.Infrastructure.Logging.NLog">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.MarketData.IStockPriceBot, SpreadBet.MarketData"
                  mapTo="SpreadBet.MarketData.LiveChartsStockPriceBot, SpreadBet.MarketData">
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="LoggingBehaviour"/>
          <lifetime type="singleton" />
        </register>

        <register name="publisher"
                  type="SpreadBet.Infrastructure.IProcessor, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.MarketData.PriceFeedBotProcessor, SpreadBet.MarketData">
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="LoggingBehaviour"/>
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Common.Interfaces.IStockDataProvider, SpreadBet.Common"
	                mapTo="SpreadBet.Common.Components.StockDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="LoggingBehaviour"/>
        </register>

        <register type="SpreadBet.Domain.Interfaces.IRepository, SpreadBet.Domain.Interfaces"
                  mapTo="SpreadBet.Infrastructure.Data.EFRepository, SpreadBet.Infrastructure.Data">
          <lifetime type="singleton" />
        </register>

        <register name="subscriber"
                  type="SpreadBet.Infrastructure.IProcessor, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.MarketData.PriceFeedSubscribeProcessor, SpreadBet.MarketData">
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="LoggingBehaviour"/>
          <lifetime type="singleton" />
        </register>

      </container>

      <container name="GetBetDecisions">

        <instances>
          <add name="periods" type="System.Int32" value="5" />
          <add name="maxBidAmount" type="System.Decimal" value="100.00"/>
          <add name="maxLoss" type="System.Decimal" value="200.00"/>
          <add name="spreadLossRatio" type="System.Decimal" value="0.5"/>
        </instances>

        <register name="CommandProcessor"
                  type="SpreadBet.Infrastructure.IProcessor, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.Handlers.CommandProcessor, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
          <constructor>
            <param name="receiver"/>
            <param name="serialiser"/>
            <param name="registry"/>
          </constructor>
        </register>

        <!-- 
	Secify the application that will be retrieving the stock price information -->
        <register name="GetBetDecisions"
                        type="SpreadBet.Infrastructure.IProcessor, SpreadBet.Infrastructure"
                        mapTo="SpreadBet.Application.GetBetDecisions, SpreadBet.Application">
          <lifetime type="singleton" />
          <constructor>
            <param name="stockDataProvider"/>
            <param name="stockFilter" dependencyName="CompositeStockFilter"/>
            <param name="investDecider"/>
            <param name="commandBus"/>
            <param name="priceUpdate"/>
          </constructor>
        </register>

        <!-- 
		Secify the application that will be retrieving the stock price information -->
        <register type="SpreadBet.Common.Interfaces.IExecutableApplication, SpreadBet.Common"
              mapTo="SpreadBet.Application.GetBetDecisions, SpreadBet.Application">
          <lifetime type="singleton" />
          <constructor>
            <param name="stockDataProvider"/>
            <param name="stockFilter" dependencyName="CompositeStockFilter"/>
            <param name="investDecider"/>
            <param name="commandBus"/>
          </constructor>
        </register>

        <!-- 
		    This component will return the bed decisions based on the stock price data privided to it. -->
        <register type="SpreadBet.Common.Interfaces.IInvestDecider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.DecisionByGrowthAndCurrentPosition, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="stockHistoryDataProvider"/>
            <param name="accountDataProvider"/>
            <param name="periods" dependencyName="periods"/>
            <param name="maxBidAmount" dependencyName="maxBidAmount"/>
            <param name="maxLoss" dependencyName="maxLoss"/>
            <param name="spreadLossRatio" dependencyName="spreadLossRatio"/>
          </constructor>
        </register>

        <!-- 
		    The stock data provider will provide the ability to get and save stock data. -->
        <register type="SpreadBet.Common.Interfaces.IStockDataProvider, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.StockDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Used to retrieve historical stock prices -->
        <register type="SpreadBet.Common.Interfaces.IStockHistoryDataProvider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.StockHistoryDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Used to retrieve information about our account -->
        <register type="SpreadBet.Common.Interfaces.IAccountDataProvider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.AccountDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Used to retrieve information about our portfolio -->
        <register type="SpreadBet.Common.Interfaces.IPortfolioDataProvider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.PortfolioDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    This component will group together different filtering techniques to determine stocks which are attractive. -->
        <register name="CompositeStockFilter"
				      type="SpreadBet.Common.Interfaces.IStockFilter, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.CompositeStockFilter, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="filters">
              <array>
                <dependency name="ExistingStockRemoval"/>
                <dependency name="ConsistentChangeFilter"/>
                <dependency name="MinimumRateOfChange"/>
              </array>
            </param>
          </constructor>
        </register>

        <!-- 
		    Removes any stock we already have in our portfolio -->
        <register name="ExistingStockRemoval"
				      type="SpreadBet.Common.Interfaces.IStockFilter, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.ExistingStockRemovalFilter, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Removes any stock we already have in our portfolio -->
        <register name="ConsistentChangeFilter"
				      type="SpreadBet.Common.Interfaces.IStockFilter, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.ConsistentChangeStockFilter, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="stockHistoryProvider"/>
            <param name="periods" dependencyName="periods"/>
          </constructor>
        </register>

        <!-- 
		    Removes any stock we already have in our portfolio -->
        <register name="MinimumRateOfChange"
				      type="SpreadBet.Common.Interfaces.IStockFilter, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.MinimumRateOfChangeStockFilter, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="stockHistoryProvider"/>
            <param name="periods" dependencyName="periods"/>
            <param name="reductionRate" value="25"/>
            <!-- 25% -->
            <param name="growthRate" value="25"/>
            <!-- 25% -->
          </constructor>
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.Handlers.ICommandHandlerRegistry, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Unity.Messaging.Handlers.UnityCommandHandlerRegistry, SpreadBet.Infrastructure.Unity">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.ICommandBus, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.CommandBus, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
          <constructor>
            <param name="messageSender"/>
            <param name="textSerialiser"/>
          </constructor>
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.IMessageSender, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.StraightThroughChannel, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.IMessageReceiver, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.StraightThroughChannel, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Serialisation.ITextSerialiser, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Json.Serialisation.JsonTextSerialiser, SpreadBet.Infrastructure.Json">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.Handlers.ICommandHandler`1[[SpreadBet.Domain.Commands.PlaceBetCommand,SpreadBet.Domain.Commands]], SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Domain.Handlers.BetCommandHandler, SpreadBet.Domain.Handlers">
          <lifetime type="singleton" />
          <constructor>
            <param name="portfolioDataProvider"/>
            <param name="accountDataProvider"/>
            <param name="stockDataProvider"/>
            <param name="betController"/>
          </constructor>
        </register>

        <!-- Entity framework repository. -->
        <register type="SpreadBet.Domain.Interfaces.IRepository, SpreadBet.Domain.Interfaces"
                mapTo="SpreadBet.Infrastructure.Data.EFRepository, SpreadBet.Infrastructure.Data">
          <lifetime type="singleton" />
        </register>

        <!-- Automation settings. -->
        <register type="SpreadBet.Common.Interfaces.IAutomationSettings, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.BullBearingsSettings, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Automation driver. -->
        <register type="SpreadBet.Common.Interfaces.IAutomationDriver, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.PhantomDriver, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Automation settings. -->
        <register type="SpreadBet.Common.Interfaces.IAutomationProvider, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.BullBearingsProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Bet controller. -->
        <register type="SpreadBet.Common.Interfaces.IBetController, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.BullBearingsController, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Price update. -->
        <register type="SpreadBet.Common.Interfaces.IUpdate, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.PriceUpdate, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

      </container>

      <container name="CloseBetDecisions">

        <instances>
          <add name="periods" type="System.Int32" value="5" />
          <add name="maxBidAmount" type="System.Decimal" value="100.00"/>
          <add name="maxLoss" type="System.Decimal" value="200.00"/>
          <add name="spreadLossRatio" type="System.Decimal" value="0.5"/>
        </instances>

        <register name="CommandProcessor"
                  type="SpreadBet.Infrastructure.IProcessor, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.Handlers.CommandProcessor, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
          <constructor>
            <param name="receiver"/>
            <param name="serialiser"/>
            <param name="registry"/>
          </constructor>
        </register>

        <!-- 
		    Specify the application that will be close current bets-->
        <register name="CloseBetDecisions"
                  type="SpreadBet.Infrastructure.IProcessor, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Application.GetBetDecisions, SpreadBet.Application">
          <lifetime type="singleton" />
          <constructor>
            <param name="portfolioDataProvider"/>
            <param name="exitDecider" dependencyName="CompositeExitDecider"/>
            <param name="commandBus"/>
            <param name="priceUpdate"/>
          </constructor>
        </register>


        <!-- 
		    The stock data provider will provide the ability to get and save stock data. -->
        <register type="SpreadBet.Common.Interfaces.IStockDataProvider, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.StockDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Used to retrieve historical stock prices -->
        <register type="SpreadBet.Common.Interfaces.IStockHistoryDataProvider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.StockHistoryDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Used to retrieve information about our account -->
        <register type="SpreadBet.Common.Interfaces.IAccountDataProvider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.AccountDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    Used to retrieve information about our portfolio -->
        <register type="SpreadBet.Common.Interfaces.IPortfolioDataProvider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.PortfolioDataProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- 
		    This component will group together different exiting decisions. -->
        <register name="CompositeExitDecider"
				      type="SpreadBet.Common.Interfaces.IExitDecider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.CompositeExitDecider, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="filters">
              <array>
                <dependency name="ExitAfterInvestmentPeriod"/>
                <dependency name="ExitOnReEvaluatingInvestDecision"/>
              </array>
            </param>
          </constructor>
        </register>

        <!-- 
		    This component will exit bets after period -->
        <register name="ExitAfterInvestmentPeriod"
              type="SpreadBet.Common.Interfaces.IExitDecider, SpreadBet.Common"
				      mapTo="SpreadBet.Common.Components.ExitAfterInvestmentPeriod, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="periods" dependencyName="periods"/>
          </constructor>
        </register>

        <!-- 
		    This component will exit bets when trend changes -->
        <register name="ExitOnReEvaluatingInvestDecision"
                  type="SpreadBet.Common.Interfaces.IExitDecider, SpreadBet.Common"
				          mapTo="SpreadBet.Common.Components.ExitOnReEvaluatingInvestDecision, SpreadBet.Common">
          <lifetime type="singleton" />
          <constructor>
            <param name="periods" dependencyName="periods"/>
          </constructor>
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.Handlers.ICommandHandlerRegistry, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Unity.Messaging.Handlers.UnityCommandHandlerRegistry, SpreadBet.Infrastructure.Unity">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.ICommandBus, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.CommandBus, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
          <constructor>
            <param name="messageSender"/>
            <param name="textSerialiser"/>
          </constructor>
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.IMessageSender, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.StraightThroughChannel, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.IMessageReceiver, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Messaging.StraightThroughChannel, SpreadBet.Infrastructure">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Serialisation.ITextSerialiser, SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Infrastructure.Json.Serialisation.JsonTextSerialiser, SpreadBet.Infrastructure.Json">
          <lifetime type="singleton" />
        </register>

        <register type="SpreadBet.Infrastructure.Messaging.Handlers.ICommandHandler`1[[SpreadBet.Domain.Commands.CloseBetCommand,SpreadBet.Domain.Commands]], SpreadBet.Infrastructure"
                  mapTo="SpreadBet.Domain.Handlers.CloseCommandHandler, SpreadBet.Domain.Handlers">
          <lifetime type="singleton" />
          <constructor>
            <param name="portfolioDataProvider"/>
            <param name="betController"/>
          </constructor>
        </register>

        <!-- Entity framework repository. -->
        <register type="SpreadBet.Domain.Interfaces.IRepository, SpreadBet.Domain.Interfaces"
                mapTo="SpreadBet.Infrastructure.Data.EFRepository, SpreadBet.Infrastructure.Data">
          <lifetime type="singleton" />
        </register>

        <!-- Automation settings. -->
        <register type="SpreadBet.Common.Interfaces.IAutomationSettings, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.BullBearingsSettings, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Automation driver. -->
        <register type="SpreadBet.Common.Interfaces.IAutomationDriver, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.PhantomDriver, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Automation settings. -->
        <register type="SpreadBet.Common.Interfaces.IAutomationProvider, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.BullBearingsProvider, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Bet controller. -->
        <register type="SpreadBet.Common.Interfaces.IBetController, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.Automation.BullBearingsController, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

        <!-- Price update. -->
        <register type="SpreadBet.Common.Interfaces.IUpdate, SpreadBet.Common"
                  mapTo="SpreadBet.Common.Components.PriceUpdate, SpreadBet.Common">
          <lifetime type="singleton" />
        </register>

      </container>

    </containers>
  </unity>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>

  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
  </entityFramework>

  <nlog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <targets async="true">
      <target name="logfile" xsi:type="File" fileName="log.${shortdate}.txt" layout="${longdate}|${level}|${threadid}|${message}"/>
      <target name="console" xsi:type="Console" layout="${longdate}|${level}|${threadid}|${message}"/>
    </targets>

    <rules>
      <logger name="*" minlevel="Trace" writeTo="logfile" />
      <logger name="*" minlevel="Trace" writeTo="console" />
    </rules>

  </nlog>

</configuration>